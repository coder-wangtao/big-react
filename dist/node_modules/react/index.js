(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.React = {}));
})(this, (function (exports) { 'use strict';

  const currentDispatcher = {
      current: null,
  };
  const resolveDispatcher = () => {
      const dispatcher = currentDispatcher.current;
      if (dispatcher === null) {
          console.error("resolve dispatcher时dispatcher不存在");
      }
      return dispatcher;
  };

  const supportSymbol = typeof Symbol === "function" && Symbol.for;
  const REACT_ELEMENT_TYPE = supportSymbol
      ? Symbol.for("react.element")
      : 0xeac7;

  const ReactElement = function (type, key, ref, props) {
      const element = {
          $$typeof: REACT_ELEMENT_TYPE,
          type: type,
          key,
          ref,
          props,
          __mark: "KaSong",
      };
      return element;
  };
  function hasValidKey(config) {
      return config.key !== undefined;
  }
  function hasValidRef(config) {
      return config.ref !== undefined;
  }
  function isValidElement$1(object) {
      return (typeof object === "object" &&
          object !== null &&
          object.$$typeof === REACT_ELEMENT_TYPE);
  }
  // jsxDEV传入的后续几个参数与jsx不同
  const jsx = (type, config, maybeKey) => {
      debugger;
      let key = null;
      const props = {};
      let ref = null;
      if (maybeKey !== undefined) {
          key = "" + maybeKey;
      }
      for (const prop in config) {
          const val = config[prop];
          if (prop === "key") {
              if (hasValidKey(config)) {
                  key = "" + val;
              }
              continue;
          }
          if (prop === "ref" && val !== undefined) {
              if (hasValidRef(config)) {
                  ref = val;
              }
              continue;
          }
          if ({}.hasOwnProperty.call(config, prop)) {
              props[prop] = val;
          }
      }
      return ReactElement(type, key, ref, props);
  };
  const jsxDEV = jsx;

  const useState = (initialState) => {
      const dispatcher = resolveDispatcher();
      return dispatcher.useState(initialState);
  };
  const __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = {
      currentDispatcher,
  };
  // 这里应该根据环境区分jsx/jsxDEV，在测试用例中也要区分，当前ReactElement-test.js中使用的是jsx
  const createElement = jsx;
  const isValidElement = isValidElement$1;
  var index = {
      version: "0.0.0",
      createElement: jsxDEV,
  };

  exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
  exports.createElement = createElement;
  exports.default = index;
  exports.isValidElement = isValidElement;
  exports.useState = useState;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
